#include "test.h"
#include "stage.h"
#include "abstract_file.h"
#include <stdlib.h>
#include <unistd.h>

%(test Stage lookup)
{
    Stage *s = new_stage();
    char *s1 = "boop";
    AbstractFile *f = malloc(sizeof(AbstractFile));
    abstract_file_init(f, s1);

    tagdb_key_t k = key_new();
    key_push_end(k, 23ll);
    key_push_end(k, 3ll);
    key_push_end(k, 1ll);
    stage_add(s, k, f);

    AbstractFile* p = stage_lookup(s, k, s1);
    CU_ASSERT_STRING_EQUAL(p->name, s1);
    free(f);
    key_destroy(k);
    stage_destroy(s);
}

%(test Stage lookup_2)
{
    Stage *s = new_stage();
    char *s1 = "boop";
    AbstractFile *f = malloc(sizeof(AbstractFile));
    abstract_file_init(f, s1);

    tagdb_key_t k = key_new();
    key_push_end(k, 3ll);
    key_push_end(k, 1ll);
    key_push_end(k, 23ll);
    stage_add(s, k, f);

    tagdb_key_t j = key_new();
    key_push_end(j, 3ll);
    key_push_end(j, 23ll);
    key_push_end(j, 1ll);
    AbstractFile* p = stage_lookup(s, j, s1);
    CU_ASSERT_NULL(p);
    stage_destroy(s);
    free(f);
    key_destroy(k);
    key_destroy(j);
}

%(test Stage lookup_3)
{
    Stage *s = new_stage();
    char *s1 = "boop";
    AbstractFile *f = malloc(sizeof(AbstractFile));
    abstract_file_init(f, s1);

    tagdb_key_t k = key_new();
    key_push_end(k, 3ll);
    key_push_end(k, 1ll);
    key_push_end(k, 23ll);
    stage_add(s, k, f);

    tagdb_key_t j = key_new();
    key_push_end(j, 3ll);
    key_push_end(j, 23ll);
    AbstractFile* p = stage_lookup(s, j, s1);
    CU_ASSERT_NULL(p);
    stage_destroy(s);
    free(f);
    key_destroy(k);
    key_destroy(j);
}

%(test Stage lookup_4)
{
    Stage *s = new_stage();
    char *s1 = "boop";
    AbstractFile f;
    abstract_file_init(&f, s1);

    tagdb_key_t k = key_new();
    key_push_end(k, 3ll);
    key_push_end(k, 1ll);
    key_push_end(k, 23ll);
    stage_add(s, k, &f);

    tagdb_key_t j = key_new();
    key_push_end(j, 3ll);
    key_push_end(j, 1ll);
    key_push_end(j, 23ll);
    key_push_end(j, 43ll);
    AbstractFile* p = stage_lookup(s, j, s1);
    CU_ASSERT_NULL(p);
    stage_destroy(s);
    key_destroy(k);
    key_destroy(j);
}

%(test Stage insert_same_name)
{
    /* only one shall rule them all!
     *  (Only one is stored when they share a name)
     */
    Stage *s = new_stage();
    char *s1 = "boop";
    AbstractFile f;
    AbstractFile g;
    abstract_file_init(&f, s1);
    abstract_file_init(&g, s1);

    tagdb_key_t k = key_new();
    key_push_end(k, 3ll);
    key_push_end(k, 1ll);
    key_push_end(k, 23ll);
    stage_add(s, k, &f);
    stage_add(s, k, &g);
    GList* p = stage_list_position(s, k);
    CU_ASSERT_EQUAL(g_list_length(p), 1);
    g_list_free(p);
    stage_destroy(s);
    key_destroy(k);
}

%(test Stage remove_1)
{
    Stage *s = new_stage();
    char *s1 = "boop";
    AbstractFile f;
    abstract_file_init(&f, s1);
    tagdb_key_t k = key_new();
    key_push_end(k, 3ll);
    key_push_end(k, 1ll);
    key_push_end(k, 2ll);
    stage_add(s, k, &f);
    stage_remove(s, k, &f);
    GList *l = stage_list_position(s,k);
    CU_ASSERT_NULL(l);
    g_list_free(l);
    stage_destroy(s);
    key_destroy(k);
}

%(test Stage remove_2)
{
    Stage *s = new_stage();
    AbstractFile f;
    AbstractFile g;
    abstract_file_init(&f, "free");
    abstract_file_init(&g, "junk");

    tagdb_key_t k = key_new();
    key_push_end(k, 3ll);
    key_push_end(k, 1ll);
    key_push_end(k, 2ll);

    stage_add(s, k, &f);
    stage_add(s, k, &g);
    stage_remove(s, k, &f);
    stage_remove(s, k, &g);
    GList *l = stage_list_position(s,k);
    CU_ASSERT_NULL(l);
    g_list_free(l);
    stage_destroy(s);
    key_destroy(k);
}

%(test Stage remove_1_from_2)
{
    Stage *s = new_stage();
    AbstractFile f;
    AbstractFile g;
    abstract_file_init(&f, "free");
    abstract_file_init(&g, "junk");

    tagdb_key_t k = key_new();
    key_push_end(k, 3ll);
    key_push_end(k, 1ll);
    key_push_end(k, 2ll);

    stage_add(s, k, &f);
    stage_add(s, k, &g);
    stage_remove(s, k, &f);
    GList *l = stage_list_position(s,k);
    CU_ASSERT_STRING_EQUAL(abstract_file_get_name(l->data), "junk");
    g_list_free(l);
    stage_destroy(s);
    key_destroy(k);
}

%(test Stage insert_empty_key)
{
    Stage *s = new_stage();
    AbstractFile f;
    abstract_file_init(&f, "free");
    tagdb_key_t k = key_new();
    stage_add(s, k, &f);
    GList *l = stage_list_position(s,k);
    CU_ASSERT_STRING_EQUAL(abstract_file_get_name(l->data), "free");
    g_list_free(l);
    stage_destroy(s);
    key_destroy(k);
}

%(test Stage memory_leak)
{
    /* This one was discoverd in
     * acceptance_test.pl
     * this is a more minimal
     * reproduction
     */
    Stage *s = new_stage();
    AbstractFile f;
    abstract_file_init(&f, "free");

    tagdb_key_t k = key_new();
    key_push_end(k, 0ll);

    stage_add(s, k, &f);

    stage_remove_tag(s,&f);

    stage_destroy(s);
    key_destroy(k);
}

int main ()
{
    %(run_tests);
}
