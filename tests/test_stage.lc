#include "test.h"
#include "stage.h"
#include "abstract_file.h"
#include <stdlib.h>
#include <unistd.h>

/* Note: In the stage_lookups, all of the AbstractFiles start with id = 0,
 * so the lookup-key is just 0
 */
%(test Stage lookup)
{
    Stage *s = new_stage();
    file_id_t f = 0;

    tagdb_key_t k = key_new();
    key_push_end(k, 23ll);
    key_push_end(k, 3ll);
    key_push_end(k, 1ll);
    stage_add(s, k, f);

    CU_ASSERT_TRUE(stage_lookup(s, k, 0));
    key_destroy(k);
    stage_destroy(s);
}

%(test Stage lookup_jumbled_key_fails)
{
    Stage *s = new_stage();
    file_id_t f = 0;

    tagdb_key_t k = key_new();
    key_push_end(k, 3ll);
    key_push_end(k, 1ll);
    key_push_end(k, 23ll);
    stage_add(s, k, f);

    tagdb_key_t j = key_new();
    key_push_end(j, 3ll);
    key_push_end(j, 23ll);
    key_push_end(j, 1ll);
    CU_ASSERT_FALSE(stage_lookup(s, j, 0));
    stage_destroy(s);
    key_destroy(k);
    key_destroy(j);
}

%(test Stage lookup_partial_key_fails)
{
    Stage *s = new_stage();
    file_id_t f = 0;

    tagdb_key_t k = key_new();
    key_push_end(k, 3ll);
    key_push_end(k, 1ll);
    key_push_end(k, 23ll);
    stage_add(s, k, f);

    tagdb_key_t j = key_new();
    key_push_end(j, 3ll);
    key_push_end(j, 23ll);
    CU_ASSERT_FALSE(stage_lookup(s, j, 0));
    stage_destroy(s);
    key_destroy(k);
    key_destroy(j);
}

%(test Stage lookup_key_with_additional_parts_fails)
{
    Stage *s = new_stage();
    file_id_t f = 0;

    tagdb_key_t k = key_new();
    key_push_end(k, 3ll);
    key_push_end(k, 1ll);
    key_push_end(k, 23ll);
    stage_add(s, k, f);

    tagdb_key_t j = key_new();
    key_push_end(j, 3ll);
    key_push_end(j, 1ll);
    key_push_end(j, 23ll);
    key_push_end(j, 43ll);
    CU_ASSERT_FALSE(stage_lookup(s, j, 0));
    stage_destroy(s);
    key_destroy(k);
    key_destroy(j);
}

%(test Stage insert_same_id_doesnt_duplicate_entries)
{
    Stage *s = new_stage();
    file_id_t f = 0;

    tagdb_key_t k = key_new();
    key_push_end(k, 3ll);
    key_push_end(k, 1ll);
    key_push_end(k, 23ll);
    stage_add(s, k, f);
    stage_add(s, k, f);

    GList* p = stage_list_position(s, k);

    CU_ASSERT_EQUAL(g_list_length(p), 1);

    g_list_free(p);
    stage_destroy(s);
    key_destroy(k);
}

%(test Stage remove_basic_succeeds)
{
    Stage *s = new_stage();
    file_id_t f = 0;

    tagdb_key_t k = key_new();
    key_push_end(k, 3ll);
    key_push_end(k, 1ll);
    key_push_end(k, 2ll);
    stage_add(s, k, f);

    stage_remove(s, k, f);

    GList *l = stage_list_position(s, k);
    CU_ASSERT_NULL(l);
    g_list_free(l);
    stage_destroy(s);
    key_destroy(k);
}

%(test Stage remove_basic_succeeds_2)
{
    Stage *s = new_stage();
    file_id_t f = 0;
    file_id_t g = 1;

    tagdb_key_t k = key_new();
    key_push_end(k, 3ll);
    key_push_end(k, 1ll);
    key_push_end(k, 2ll);

    stage_add(s, k, f);
    stage_add(s, k, g);
    stage_remove(s, k, f);
    stage_remove(s, k, g);
    GList *l = stage_list_position(s,k);
    CU_ASSERT_NULL(l);
    g_list_free(l);
    stage_destroy(s);
    key_destroy(k);
}

%(test Stage remove_one_from_two)
{
    Stage *s = new_stage();
    file_id_t f = 0;
    file_id_t g = 1;

    tagdb_key_t k = key_new();
    key_push_end(k, 3ll);
    key_push_end(k, 1ll);
    key_push_end(k, 2ll);

    stage_add(s, k, f);
    stage_add(s, k, g);
    stage_remove(s, k, f);
    GList *l = stage_list_position(s, k);
    if (l)
    {
        CU_ASSERT_EQUAL(TO_S(l->data), g);
    }
    else
    {
        CU_FAIL();
    }
    g_list_free(l);
    stage_destroy(s);
    key_destroy(k);
}

%(test Stage insert_empty_key)
{
    Stage *s = new_stage();
    file_id_t f = 0;
    tagdb_key_t k = key_new();
    stage_add(s, k, f);
    GList *l = stage_list_position(s,k);
    printf("insert_empty_key l = %p\n", l);
    if (l)
    {
        CU_ASSERT_EQUAL(TO_S(l->data), 0);
    }
    else
    {
        CU_FAIL();
    }
    g_list_free(l);
    stage_destroy(s);
    key_destroy(k);
}

%(test Stage memory_leak)
{
    /* This one was discovered in
     * acceptance_test.pl.
     *
     * This is a more minimal
     * reproduction
     */
    Stage *s = new_stage();
    file_id_t f = 0;

    tagdb_key_t k = key_new();
    key_push_end(k, 0ll);

    stage_add(s, k, f);

    stage_remove_all(s, f);

    stage_destroy(s);
    key_destroy(k);
}

%(test Stage issue_34)
{
    Stage *s = new_stage();
    file_id_t f = 0;
    file_id_t g = 1;

    tagdb_key_t k = key_new();
    key_push_end(k, 0ll);
    stage_add(s, k, f);

    tagdb_key_t j = key_new();
    key_push_end(j, 1ll);
    stage_add(s, j, g);

    key_destroy(k);
    key_destroy(j);
    stage_destroy(s);
}

int main ()
{
    %(run_tests);
}
