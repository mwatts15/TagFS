#include <errno.h>
#include <unistd.h>
#include "file.h"
#include "test.h"
#include "util.h"
#include "file_cabinet.h"

/* These are black box tests for FileCabinet
 * they are made with an eye to replacing the
 * GHashTable based FileCabinet with a SQLite
 * based version.
 *
 * File and tagdb_key_t are still to be used.
 */
#define TESTDIR "/tmp/file_cabinet_test.XXXXXX"
sqlite3 *sqlite_db = NULL;
char test_directory[] = TESTDIR;
char *db_name = NULL;

%(setup FileCabinet)
{
    /* 256 MB mmap file */
    strcpy(test_directory, TESTDIR);
    mkdtemp(test_directory);
    db_name = g_strdup_printf("%s/sql.db", test_directory);
    int sqlite_flags = SQLITE_OPEN_READWRITE|SQLITE_OPEN_CREATE|SQLITE_OPEN_FULLMUTEX;
    if (sqlite3_open_v2(db_name, &sqlite_db, sqlite_flags, NULL) != SQLITE_OK)
    {
        const char *msg = sqlite3_errmsg(sqlite_db);
        printf("sqlite3 error: %s\n", msg);
    }
}

%(teardown FileCabinet)
{
    if (unlink(db_name) != 0)
    {
        perror("teardown: Error with unlink");
    }
    if (rmdir(test_directory) != 0)
    {
        perror("teardown: Error with rmdir");
    }
}

%(test FileCabinet drawer_size_1)
{
    FileCabinet *fc = file_cabinet_new(sqlite_db);
    file_cabinet_new_drawer(fc, 1);
    CU_ASSERT_EQUAL(0, file_cabinet_drawer_size(fc,1));
    file_cabinet_destroy(fc);
}

%(test FileCabinet drawer_size_2)
{
    /* Need to do this in here to make the file die first */
    FileCabinet *fc = file_cabinet_new(sqlite_db);
    file_cabinet_new_drawer(fc, 1);
    File *f = new_file("aFile");
    file_cabinet_insert(fc, 1, f);
    CU_ASSERT_EQUAL(1, file_cabinet_drawer_size(fc,1));
    file_cabinet_destroy(fc);
    file_destroy(f);
}

%(test FileCabinet drawer_size_3)
{
    /* Make a bunch of files and get them back
     */
    FileCabinet *fc = file_cabinet_new(sqlite_db);
    int nfiles = 10;
    char fnamebuf[16];
    file_cabinet_new_drawer(fc, 1);
    File *files = malloc(sizeof(File) * nfiles);
    for (int i = 0; i < nfiles; i++)
    {
        sprintf(fnamebuf, "aFile%d", i);
        file_init(files + i, fnamebuf);
        file_cabinet_insert(fc, 1, (files + i));
    }
    int size = file_cabinet_drawer_size(fc,1);
    CU_ASSERT_EQUAL(nfiles, size);
    file_cabinet_destroy(fc);
    for (int i = 0; i < nfiles; i++)
    {
        CU_ASSERT_EQUAL(TRUE, file_destroy0(files+i));
    }
    free(files);
}

%(test FileCabinet get_drawer_l_1)
{
    /* Make a bunch of files and get them back
     */
    FileCabinet *fc = file_cabinet_new(sqlite_db);
    int nfiles = 10;
    char fnamebuf[16];
    file_cabinet_new_drawer(fc, 1);
    File *files = malloc(sizeof(File) * nfiles);
    for (int i = 0; i < nfiles; i++)
    {
        sprintf(fnamebuf, "aFile%d", i);
        file_init(files + i, fnamebuf);
        file_cabinet_insert(fc, 1, (files + i));
    }
    GList *l = file_cabinet_get_drawer_l(fc,1);
    LL(l, it)
    {
        File *tf = it->data;
        int idx = strtoul(file_name(tf) + strlen("aFile"), NULL, 10);
        CU_ASSERT_PTR_EQUAL((files + idx), tf);
    } LL_END;
    g_list_free(l);
    file_cabinet_destroy(fc);

    for (int i = 0; i < nfiles; i++)
    {
        file_destroy0(files+i);
    }
    free(files);
}

%(test FileCabinet insert_v_1)
{
    /* Add and a file to a couple of places and remove it
     * from those places.
     */
    FileCabinet *fc = file_cabinet_new(sqlite_db);
    key_elem_t labels[] = {1,2,3};
    tagdb_key_t k = make_key(labels,3);
    file_cabinet_new_drawer(fc, 1);
    file_cabinet_new_drawer(fc, 2);
    file_cabinet_new_drawer(fc, 3);

    File *f = new_file("aFile");
    file_cabinet_insert_v(fc, k, f);
    for (int i = 0; i < 3; i++)
    {
        CU_ASSERT_EQUAL(1, file_cabinet_drawer_size(fc, i+1));
    }
    key_destroy(k);
    file_cabinet_destroy(fc);
    file_destroy(f);
}

%(test FileCabinet remove_all_bad_1)
{
    /* Add and a file to a couple of places, but fails
     * to remove them by remove_all since those tags aren't
     * actually 'on' the file
     */
    FileCabinet *fc = file_cabinet_new(sqlite_db);
    key_elem_t labels[] = {1,2,3};
    tagdb_key_t k = make_key(labels,3);
    file_cabinet_new_drawer(fc, 1);
    file_cabinet_new_drawer(fc, 2);
    file_cabinet_new_drawer(fc, 3);

    File *f = new_file("aFile");
    file_cabinet_insert_v(fc, k, f);
    file_cabinet_remove_all(fc, f);
    for (int i = 0; i < 3; i++)
    {
        CU_ASSERT_EQUAL(1, file_cabinet_drawer_size(fc, i+1));
    }
    key_destroy(k);
    file_cabinet_destroy(fc);
    file_destroy(f);
}

%(test FileCabinet remove_all_1)
{
    /* Add and a file to a couple of places, but fails
     * to remove them by remove_all since those tags aren't
     * actually 'on' the file
     */
    FileCabinet *fc = file_cabinet_new(sqlite_db);
    key_elem_t labels[] = {1,2,3};
    tagdb_key_t k = make_key(labels,3);
    file_cabinet_new_drawer(fc, 1);
    file_cabinet_new_drawer(fc, 2);
    file_cabinet_new_drawer(fc, 3);

    File *f = new_file("aFile");
    file_cabinet_insert_v(fc, k, f);
    file_cabinet_remove_all(fc, f);
    for (int i = 0; i < 3; i++)
    {
        CU_ASSERT_EQUAL(1, file_cabinet_drawer_size(fc, i+1));
    }
    key_destroy(k);
    file_cabinet_destroy(fc);
    file_destroy(f);
}

%(test FileCabinet remove_v_1)
{
    /* Add and a file to a couple of places, but fails
     * to remove them by remove_all since those tags aren't
     * actually 'on' the file
     */
    FileCabinet *fc = file_cabinet_new(sqlite_db);
    key_elem_t labels[] = {1,2,3};
    tagdb_key_t k = make_key(labels,3);
    file_cabinet_new_drawer(fc, 1);
    file_cabinet_new_drawer(fc, 2);
    file_cabinet_new_drawer(fc, 3);

    File *f = new_file("aFile");
    file_cabinet_insert_v(fc, k, f);
    file_cabinet_remove_v(fc, k, f);
    for (int i = 0; i < 3; i++)
    {
        CU_ASSERT_EQUAL(0, file_cabinet_drawer_size(fc, i+1));
    }
    key_destroy(k);
    file_cabinet_destroy(fc);
    file_destroy(f);
}

%(test FileCabinet remove_all_2)
{
    /* Remove all when the file isn't in any drawers
     * but some drawers exist
     */
    FileCabinet *fc = file_cabinet_new(sqlite_db);
    file_cabinet_new_drawer(fc, 1);
    file_cabinet_new_drawer(fc, 2);
    file_cabinet_new_drawer(fc, 3);

    File *f = new_file("aFile");
    file_cabinet_remove_all(fc, f);
    for (int i = 0; i < 3; i++)
    {
        CU_ASSERT_EQUAL(0, file_cabinet_drawer_size(fc, i+1));
    }
    file_cabinet_destroy(fc);
    file_destroy(f);
}

%(test FileCabinet insert_v_bad_1)
{
    /* Add and a file when the associated drawers haven't
     * been created.
     *
     * Shouldn't create any drawers. The file, of course is
     * never modified.
     */
    FileCabinet *fc = file_cabinet_new(sqlite_db);
    key_elem_t labels[] = {1,2,3};
    tagdb_key_t k = make_key(labels,3);

    File *f = new_file("aFile");
    file_cabinet_insert_v(fc, k, f);
    CU_ASSERT_EQUAL(0, file_cabinet_size(fc));
    key_destroy(k);
    file_cabinet_destroy(fc);
    file_destroy(f);
}

%(test FileCabinet insert_v_bad_2)
{
    /* Add and a file when some of the associated drawers
     * haven't been created.
     *
     * Shouldn't create any drawers. And the operation as a whole
     * should fail -- no drawers have anything inserted.
     * The file, of course is never modified.
     */
    FileCabinet *fc = file_cabinet_new(sqlite_db);

    key_elem_t labels[] = {1,2,3};
    tagdb_key_t k = make_key(labels,3);

    file_cabinet_new_drawer(fc, 1);
    file_cabinet_new_drawer(fc, 2);

    File *f = new_file("aFile");

    file_cabinet_insert_v(fc, k, f);

    CU_ASSERT_EQUAL(2, file_cabinet_size(fc));
    CU_ASSERT_EQUAL(0, file_cabinet_drawer_size(fc, 1));
    CU_ASSERT_EQUAL(0, file_cabinet_drawer_size(fc, 2));

    key_destroy(k);
    file_cabinet_destroy(fc);
    file_destroy(f);
}

int main ()
{
    %(run_tests)
}
