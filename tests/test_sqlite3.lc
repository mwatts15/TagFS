#include "test.h"
#include <sqlite3.h>
#include <stdlib.h>
#include <unistd.h>

%(test sqlite open_create)
{
    sqlite3 *my_db;
    unlink("test.db");
    CU_ASSERT_EQUAL(SQLITE_OK, sqlite3_open("test.db", &my_db));
    sqlite3_close(my_db);
}

%(test sqlite open_exists)
{
    sqlite3 *my_db;
    unlink("test.db");
    sqlite3_open("test.db", &my_db);
    sqlite3_close(my_db);
    CU_ASSERT_EQUAL(SQLITE_OK, sqlite3_open("test.db", &my_db));
    sqlite3_close(my_db);
}

%(test sqlite insert)
{
    /* TODO: Make an actual test
     */
    int fail = 0;
    sqlite3 *my_db;
    sqlite3_stmt *my_stmt;
    unlink("test.db");
    sqlite3_open("test.db", &my_db);
    sqlite3_exec(my_db, "create table test(a int,b int)", NULL, NULL, NULL);
    sqlite3_prepare(my_db, "insert into test values(1, 2)", -1, &my_stmt, NULL);
    sqlite3_finalize(my_stmt);

    sqlite3_prepare_v2(my_db, "select a,b from test", -1, &my_stmt, NULL);

    while (sqlite3_step(my_stmt) == SQLITE_ROW)
    {
        int a_val = sqlite3_column_int(my_stmt, 0);
        int b_val = sqlite3_column_int(my_stmt, 1);
        if (a_val != 1 || b_val != 2)
        {
            fail = 1;
        }
    }

    sqlite3_finalize(my_stmt);
    sqlite3_close(my_db);
    if (fail)
    {
        CU_FAIL();
    }
}

%(test sqlite prepared_stmt)
{
    int fail = 0;
    sqlite3 *my_db;
    sqlite3_stmt *stmt;
    unlink("test.db");
    sqlite3_open("test.db", &my_db);
    sqlite3_exec(my_db, "create table test(a int,b int)", NULL, NULL, NULL);
    sqlite3_prepare_v2(my_db, "insert into test(a, b) values(?,?)", -1, &stmt, NULL);
    sqlite3_reset(stmt);
    sqlite3_bind_int(stmt, 1, 1);
    sqlite3_bind_int(stmt, 2, 2);
    sqlite3_step(stmt);
    sqlite3_finalize(stmt);

    sqlite3_prepare_v2(my_db, "select a,b from test", -1, &stmt, NULL);

    while (sqlite3_step(stmt) == SQLITE_ROW)
    {
        int a_val = sqlite3_column_int(stmt, 0);
        int b_val = sqlite3_column_int(stmt, 1);
        if (a_val != 1 || b_val != 2)
        {
            fail = 1;
        }
    }
    sqlite3_finalize(stmt);
    sqlite3_close(my_db);
    if (fail)
    {
        CU_FAIL();
    }
}

static int
_sqlite_version_cb (void *pArg, int argc, char **argv, char **columnName)
{
	int *id = pArg;

	if (argv[0]) {
		*id = atoi (argv[0]);
	} else {
		*id = 0;
	}

	return 0;
}

%(test sqlite pragma_value)
{
    int result = -1;
    sqlite3 *my_db;
    sqlite3_open(":memory:", &my_db);
    sqlite3_exec(my_db, "PRAGMA user_version", _sqlite_version_cb, &result, NULL);
    printf("result[0] = %d\n", result);
    sqlite3_exec(my_db, "PRAGMA user_version=2", NULL, NULL, NULL);

    sqlite3_exec(my_db, "PRAGMA user_version", _sqlite_version_cb, &result, NULL);
    printf("result[1] = %d\n", result);
}

/*
 * Contrary to the intuition of many, sqlite3_reset() does not reset the bindings
 * on a prepared statement. Use this routine to reset all host parameters to NULL.
 */

int main ()
{
    %(run_tests);
}
