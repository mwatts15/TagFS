=====================
Contributing to TagFS
=====================
Contributions of any kind are welcome. A pull request submitted on the 
`development' branch of TagFS on GitHub will be reviewed, and if the patch 
provided provides a useful function, is well written, and tested, then it 
should be merged into the `development' branch. Please read this document, the 
README, and the TESTING file to ensure you have a good understanding of TagFS. 
Doing so prior to submission might accelerate the process of inclusion. It is
not necessary to read the NOTES file as these are mostly historical notes on
the design and evolution of TagFS

Coding conventions
------------------
Try to decompose your functions as much as possible to aid readability and 
re-use. For instance, if you have to do some locking or error checking, if 
possible, separate that out into its own function which calls a similarly named 
function that does the actual work. My pattern is (mostly) to name the function 
that does the actual work (i.e., the helper function) by just adding a '0' to 
the end of the externally-facing name. If I have to make additional, more 
deeply-nested, helpers I'll just increment the number so that the highest 
numbered version "does the thing" and each lower-numbered one calls the higher 
numbered. If more than one helper is needed or if the helper is fit to be 
public (e.g., `file_destroy_unsafe`), it usually makes more sense to name them 
by function. Ultimately, as long as it isn't too hard to understand, it's fine.

In general, don't accept NULL in an interface function. If there's a lower-level
function that has an optional argument or something, then that's great--code-
duplication is the devil--but stick it behind two interface functions. The first
function has one fewer arguments and the second makes the optional required.
Optionals have to do with choice and you want the choice to be as high up the
chain of abstraction as possible so the user has the choice. Having arguments at
the interface that tolerate NULLs tends to move the choice further down the 
chain to a point where the reason for the top-level NULL is unknown and can't be
handled coherently.

Misc
----
- `.lc` files are not "literate c". They are read by `marco.pl`, a macro tool,
  to produce `.c` files
