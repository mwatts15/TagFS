#include <ctype.h>
#include <dirent.h>
#include <errno.h>
#include <fcntl.h>
#include <libgen.h>
#include <limits.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <unistd.h>

#include "util.h"
#include "params.h"
#include "types.h"
#include "log.h"
#include "result_to_fs.h"
#include "search_fs.h"
#include "stage.h"
#include "tagdb.h"
#include "set_ops.h"
#include "query.h"
#include "path_util.h"
#include "subfs.h"

/* configuration variables */
int c_log_level = 0;
char *c_log_file_name = NULL;

%(tagfs_operations getattr readdir mkdir create rename);

%(op destroy user_data)
{
    %(log)
    log_msg("SAVING TO DATABASE : %s\n", DB->db_fname);
    tagdb_save(DB, DB->db_fname);
    tagdb_destroy(DB);
    log_close();
}

%(fuse_operations);

static GOptionEntry command_line_options[] =
{
  { "debug", 'g', 0, G_OPTION_ARG_INT, &c_log_level, "The default logging level", NULL },
  { "log-file", 'f', 0, G_OPTION_ARG_STRING, &c_log_file_name, "The log file", NULL },
  {NULL},
};

void process_options (int *argc_ptr, char ***argv_ptr)
{
    GError *error = NULL;
    GOptionContext *context;

    context = g_option_context_new("- mount a tagfs file system");
    g_option_context_set_ignore_unknown_options(context, TRUE);
    g_option_context_add_main_entries(context, command_line_options, NULL);

    if (!g_option_context_parse(context, argc_ptr, argv_ptr, &error))
    {
      g_print("option parsing failed: %s\n", error->message);
      exit(1);
    }
}

int main (int argc, char **argv)
{
    int fuse_stat = 0;
    struct tagfs_state *tagfs_data = g_try_malloc(sizeof(struct tagfs_state));

    if (!tagfs_data)
    {
        perror("Cannot alloc tagfs_data");
        abort();
    }

    process_options(&argc, &argv);

    char *prefix = g_build_filename(g_get_user_data_dir(), "tagfs", NULL);
    tagfs_data->log_file = (c_log_file_name==NULL)?g_build_filename(prefix, "tagfs.log", NULL):c_log_file_name;

    log_open(tagfs_data->log_file, c_log_level);

    char *db_fname = g_build_filename(prefix, "tagfs.db", NULL);
    tagfs_data->copiesdir = g_build_filename(prefix, "copies", NULL);

    if (mkdir(prefix, (mode_t) 0755) && errno != EEXIST)
    {
        log_error("could not make data directory");
    }
    if (mkdir(tagfs_data->copiesdir, (mode_t) 0755) && errno != EEXIST)
    {
        log_error("could not make copies directory");
    }
    if (argc < 2)
    {
        fprintf(stderr, "Must provide mount point for %s\n", argv[0]);
        abort();
    }

    log_msg("tagfs_data->copiesdir = \"%s\"\n", tagfs_data->copiesdir);

    if (!tagfs_data->copiesdir)
    {
        fprintf(stderr,"couldn't open copies directory");
        abort();
    }

    int db_fd = open(db_fname, O_RDONLY);
    if (db_fd == -1)
    {
        tagfs_data->db = tagdb_new(db_fname);
    }
    else
    {
        close(db_fd);
        tagfs_data->db = tagdb_load(db_fname);
    }

    tagfs_data->rqm = query_result_manager_new();
    tagfs_data->stage = new_stage();
    subfs_init();

    //tagfs_data->search_results = new_search_list();
    fprintf(stderr, "about to call fuse_main\n");
    fuse_stat = fuse_main(argc, argv, &%(operations_struct_name), tagfs_data);
    fprintf(stderr, "fuse_main returned %d\n", fuse_stat);

    return fuse_stat;
}
